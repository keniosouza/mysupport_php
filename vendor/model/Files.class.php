<?php/** * Classe FilesProcedures.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            25/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class Files{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $fileId = null;    private $registerId = null;    private $table = null;    private $name = null;    private $path = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function Last(int $registerId, string $table)    {        /** Parametros de entrada */        $this->registerId = $registerId;        $this->table = $table;        /** Consulta SQL */        $this->sql = 'select * from files                       where `register_id` = :registerId                       and `table` = :table                       order by file_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('registerId', $this->registerId);        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $fileId)    {        /** Parametros de entrada */        $this->fileId = $fileId;        /** Consulta SQL */        $this->sql = 'select * from files  					  where file_id = :file_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':file_id', $this->fileId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllLast($limit)    {        /** Parâmetros de entrada */        $this->limit = $limit;        /** Consulta SQL */        $this->sql = 'select * from files                       order by file_id desc		              limit :limit';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('limit', $this->limit, \PDO::PARAM_INT);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $registerId, string $table)    {        /** Parametros de entrada */        $this->registerId = $registerId;        $this->table = $table;        /** Consulta SQL */        $this->sql = 'select * from files                       where `register_id` = :registerId and `table` = :table                      order by file_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('registerId', $this->registerId);        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllByTable(string $table)    {        /** Parametros de entrada */        $this->table = $table;        /** Consulta SQL */        $this->sql = 'select * from files                       where `table` = :table                      order by file_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Insere um novo registro no banco */    public function Save(int $fileId, string $registerId, string $table, string $name, string $path, string $history)    {        /** Parametros */        $this->fileId = $fileId;        $this->registerId = $registerId;        $this->table = $table;        $this->name = $name;        $this->path = $path;        $this->history = $history;        /** Consulta SQL */        $this->sql = 'insert into files(`file_id`, 											  `register_id`, 											  `table`, 											  `name`, 											  `path`, 											  `history` 								 	 ) values (:file_id, 									  		   :register_id,									  		   :table,									  		   :name,									  		   :path,									  		   :history)';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('file_id', $this->fileId);        $this->stmt->bindParam('register_id', $this->registerId);        $this->stmt->bindParam('table', $this->table);        $this->stmt->bindParam('name', $this->name);        $this->stmt->bindParam('path', $this->path);        $this->stmt->bindParam('history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $fileId)    {        /** Parametros de entrada */        $this->fileId = $fileId;        /** Consulta SQL */        $this->sql = 'delete from files					  where  file_id = :file_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('file_id', $this->fileId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}