<?php/** * Classe UsersAcls.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            10/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class UsersAcls{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $start = null;    private $max = null;    private $limit = null;    private $usersAclsId = null;    private $modulesAclsId = null;    private $usersId = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Carrega os campos de uma tabela */    public function Describe()    {        /** Consulta SQL */        $this->sql = "describe users_acls";        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        $this->field = $this->stmt->fetchAll(\PDO::FETCH_OBJ);        /** Declara o objeto */        $resultDescribe = new \stdClass();        $Field = '';        /** Lista os campos da tabela para objetos */        foreach ($this->field as $UsersKey => $Result) {            /** Pega o nome do Field/Campo */            $Field = $Result->Field;            /** Carrega os objetos como null */            $resultDescribe->$Field = null;        }        /** Retorna os campos declarados como vazios */        return $resultDescribe;    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $usersAclsId)    {        /** Parametros de entrada */        $this->usersAclsId = $usersAclsId;        /** Consulta SQL */        $this->sql = 'select * from users_acls  					  where users_acls_id = :users_acls_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':users_acls_id', $this->usersAclsId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $usersId)    {        /** Parâmetros de entrada */        $this->usersId = $usersId;        /** Consulta SQL */        $this->sql = 'select ua.users_acls_id,		                     ma.description,		                     m.name,		                     ma.preferences		              from users_acls ua		              join modules_acls ma on ua.modules_acls_id = ma.modules_acls_id		              join modules m on ma.modules_id = m.modules_id		              where users_id = :usersId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('usersId', $this->usersId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Conta a quantidades de registros */    public function Count()    {        /** Consulta SQL */        $this->sql = 'select count(users_acls_id) as qtde					  from users_acls ';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject()->qtde;    }    /** Insere um novo registro no banco */    public function Save(int $usersAclsId, string $modulesAclsId, string $usersId)    {        /** Parametros */        $this->usersAclsId = $usersAclsId;        $this->modulesAclsId = $modulesAclsId;        $this->usersId = $usersId;        /** Verifica se o ID do registro foi informado */        if ($this->usersAclsId > 0) {            /** Consulta SQL */            $this->sql = 'update users_acls set modules_acls_id = :modules_acls_id,									   	     users_id = :users_id					  	  where users_acls_id = :users_acls_id';        } else {//Se o ID não foi informado, grava-se um novo registro            /** Consulta SQL */            $this->sql = 'insert into users_acls(users_acls_id, 											  modules_acls_id, 											  users_id 								 	 ) values (:users_acls_id, 									  		   :modules_acls_id,									  		   :users_id)';        }        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('users_acls_id', $this->usersAclsId);        $this->stmt->bindParam('modules_acls_id', $this->modulesAclsId);        $this->stmt->bindParam('users_id', $this->usersId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $usersAclsId)    {        /** Parametros de entrada */        $this->usersAclsId = $usersAclsId;        /** Consulta SQL */        $this->sql = 'delete from users_acls					  where  users_acls_id = :users_acls_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('users_acls_id', $this->usersAclsId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}