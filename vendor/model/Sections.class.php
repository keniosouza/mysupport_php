<?php/** * Classe FilesProcedures.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            25/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class Sections{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $sectionId = null;    private $registerId = null;    private $table = null;    private $name = null;    private $position = null;    private $preferences = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $sectionId)    {        /** Parametros de entrada */        $this->sectionId = $sectionId;        /** Consulta SQL */        $this->sql = 'select * from sections  					  where section_id = :sectionId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':sectionId', $this->sectionId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $registerId, string $table)    {        /** Parametros de entrada */        $this->registerId = $registerId;        $this->table = $table;        /** Consulta SQL */        $this->sql = 'select * from sections                       where `register_id` = :registerId and `table` = :table                      order by position asc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('registerId', $this->registerId);        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllByTable(string $table)    {        /** Parametros de entrada */        $this->table = $table;        /** Consulta SQL */        $this->sql = 'select * from files                       where `table` = :table                      order by file_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Insere um novo registro no banco */    public function Save(int $sectionId, string $registerId, string $table, string $name, string $position, string $preferences)    {        /** Parametros */        $this->sectionId = $sectionId;        $this->registerId = $registerId;        $this->table = $table;        $this->name = $name;        $this->position = $position;        $this->preferences = $preferences;        /** Consulta SQL */        $this->sql = 'insert into sections(`section_id`, 									       `register_id`, 									       `table`, 									       `name`, 									       `position`, 									       `preferences` 								 	 ) values (:sectionId, 									  		   :registerId,									  		   :table,									  		   :name,									  		   :position,									  		   :preferences)                     ON DUPLICATE KEY UPDATE `table` = :table,                                             `register_id` = :registerId,                                             `name` = :name,                                             `position` = :position,                                             `preferences` = :preferences;';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('sectionId', $this->sectionId);        $this->stmt->bindParam('registerId', $this->registerId);        $this->stmt->bindParam('table', $this->table);        $this->stmt->bindParam('name', $this->name);        $this->stmt->bindParam('position', $this->position);        $this->stmt->bindParam('preferences', $this->preferences);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $sectionId)    {        /** Parametros de entrada */        $this->sectionId = $sectionId;        /** Consulta SQL */        $this->sql = 'delete from sections					  where section_id = :sectionId';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('sectionId', $this->sectionId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}