<?php/*** Classe CallsClients.class.php* @filesource* @autor		Kenio de Souza* @copyright	Copyright 2022 - Souza Consultoria Tecnológica* @package		vendor* @subpackage	model* @version		1.0* @date			08/03/2022*//** Defino o local onde esta a classe */namespace vendor\model;class CallsClients{	/** Declaro as vaiavéis da classe */	private $connection = null;	private $sql = null;	private $stmt = null;	private $start = null;	private $max = null;	private $limit = null;	private $callClientId = null;	private $callId = null;	private $clientId = null;	private $companyId = null;	private $history = null;	/** Construtor da classe */	function __construct()	{		/** Cria o objeto de conexão com o banco de dados */		$this->connection = new Mysql();	}	/** Carrega os campos de uma tabela */	public function Describe()	{		/** Consulta SQL */		$this->sql = "describe calls_clients";		/** Preparo o SQL para execução */		$this->stmt = $this->connection->connect()->prepare($this->sql);		/** Executo o SQL */		$this->stmt->execute();		/** Retorno o resultado */		$this->field = $this->stmt->fetchAll(\PDO::FETCH_OBJ);		/** Declara o objeto */		$resultDescribe = new \stdClass();		$Field = '';		/** Lista os campos da tabela para objetos */		foreach($this->field as $UsersKey => $Result){			/** Pega o nome do Field/Campo */			$Field = $Result->Field;			/** Carrega os objetos como null */			$resultDescribe->$Field = null;		}		/** Retorna os campos declarados como vazios */		return $resultDescribe;	}	/** Lista os registros do banco de dados com limitação */	public function Get(int $callClientId)	{		/** Parametros de entrada */		$this->callClientId = $callClientId;		/** Consulta SQL */		$this->sql = 'select * from calls_clients  					  where call_client_id = :call_client_id';		/** Preparo o SQL para execução */		$this->stmt = $this->connection->connect()->prepare($this->sql);		/** Preencho os parâmetros do SQL */		$this->stmt->bindParam(':call_client_id', $this->callClientId);		/** Executo o SQL */		$this->stmt->execute();		/** Retorno o resultado */		return $this->stmt->fetchObject();	}	/** Lista todos os egistros do banco com ou sem paginação*/	public function All(int $callId, int $companyId)	{	    /** Parâmetros de entrada */	    $this->callId = $callId;	    $this->companyId = $companyId;		/** Consulta SQL */		$this->sql = 'select * from calls_clients cl		              left join clients c on cl.client_id = c.clients_id		              where cl.call_id = :callId and cl.company_id = :companyId';		/** Preparo o SQL para execução */		$this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('callId', $this->callId);        $this->stmt->bindParam('companyId', $this->companyId);		/** Executo o SQL */		$this->stmt->execute();		/** Retorno o resultado */		return $this->stmt->fetchAll(\PDO::FETCH_OBJ);	}	/** Conta a quantidades de registros */	public function Count()	{		/** Consulta SQL */		$this->sql = 'select count(call_client_id) as qtde					  from calls_clients ';		/** Preparo o SQL para execução */		$this->stmt = $this->connection->connect()->prepare($this->sql);		/** Executo o SQL */		$this->stmt->execute();		/** Retorno o resultado */		return $this->stmt->fetchObject()->qtde;	}	/** Insere um novo registro no banco */	public function Save(int $callClientId, int $callId, int $clientId, int $companyId, string $history)	{		/** Parametros */		$this->callClientId = $callClientId;		$this->callId = $callId;		$this->clientId = $clientId;		$this->companyId = $companyId;		$this->history = $history;		/** Verifica se o ID do registro foi informado */		if($this->callClientId > 0){			/** Consulta SQL */			$this->sql = 'update calls_clients set call_id = :call_id,									   	     client_id = :client_id,									   	     company_id = :company_id,									   	     history = :history					  	  where call_client_id = :call_client_id';		}else{//Se o ID não foi informado, grava-se um novo registro			/** Consulta SQL */			$this->sql = 'insert into calls_clients(call_client_id, 											  call_id, 											  client_id, 											  company_id, 											  history 								 	 ) values (:call_client_id, 									  		   :call_id,									  		   :client_id,									  		   :company_id,									  		   :history)';		}		/** Preparo o sql para receber os valores */		$this->stmt = $this->connection->connect()->prepare($this->sql);		/** Preencho os parâmetros do SQL */		$this->stmt->bindParam('call_client_id', $this->callClientId);		$this->stmt->bindParam('call_id', $this->callId);		$this->stmt->bindParam('client_id', $this->clientId);		$this->stmt->bindParam('company_id', $this->companyId);		$this->stmt->bindParam('history', $this->history);		/** Executo o SQL */		return $this->stmt->execute();	}	/** Deleta um determinado registro no banco de dados */	function Delete(int $callClientId)	{		/** Parametros de entrada */		$this->callClientId = $callClientId;		/** Consulta SQL */		$this->sql = 'delete from calls_clients					  where  call_client_id = :call_client_id';		/** Preparo o sql para receber os valores */		$this->stmt = $this->connection->connect()->prepare($this->sql);		/** Preencho os parâmetros do SQL */		$this->stmt->bindParam('call_client_id', $this->callClientId);		/** Executo o SQL */		return $this->stmt->execute();	}	/** Fecha uma conexão aberta anteriormente com o banco de dados */	function __destruct()	{		$this->connection = null;    }}