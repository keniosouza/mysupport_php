<?php/** * Classe CallsActivitiesUsers.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            02/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class CallsActivitiesUsers{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;        private $callActivityUserId = null;    private $callActivityId = null;    private $callId = null;    private $userId = null;    private $companyId = null;    private $callActivityUsersProgressId = null;    private $dateExpected = null;    private $dateStart = null;    private $dateClose = null;    private $dateStop = null;    private $description = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Lista os registros do banco de dados com limitação */    public function Load(int $callActivityUserId)    {        /** Parametros de entrada */        $this->callActivityUserId = $callActivityUserId;        $this->table = 'users';        /** Consulta SQL */        $this->sql = 'select                          c.name as call_name,                          c.call_id,                          c.date_close as call_date_close,                          ca.name as activity_name,                          ca.description as activity_description,                          ca.call_activity_id,                          ca.call_activity_type_id,                          ca.call_activity_priority_id,                          cap.description as call_activity_priority,                          ca.call_activity_level_id,                          ca.date_close as call_activity_date_close,                          cau.call_activity_user_id,                          cau.user_id,                          cau.description,                          cau.history,                          cat.description as call_activity_type,                          u.name_first,                          u.name_last,                          (select CONCAT(f.path, "/", f.name) from files f where f.table = :table and f.register_id = u.users_id order by file_id desc limit 1) as profile_photo                        from calls_activities_users cau                          LEFT join users u on cau.user_id = u.users_id                          LEFT join calls_activities ca on cau.call_activity_id = ca.call_activity_id                          LEFT join calls_activities_types cat on ca.call_activity_type_id = cat.call_activity_type_id                          LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                          LEFT join calls c on ca.call_id = c.call_id                        where cau.call_activity_user_id = :callActivityUserId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':callActivityUserId', $this->callActivityUserId);        $this->stmt->bindParam(':table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $callAactivityUserId)    {        /** Parametros de entrada */        $this->callActivityUserId = $callAactivityUserId;        /** Consulta SQL */        $this->sql = 'select cau.*,                             u.*                      from calls_activities_users cau                      join users u on cau.user_id = u.users_id					  where call_activity_user_id = :callActivityUserId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':callActivityUserId', $this->callActivityUserId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /**     * Lista todos os registros do banco de dados com ou sem paginação relacionados a atividades de chamada.     *     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllCallsActivitiesUsersByUserId(int $userId)    {        /** Define o ID da empresa para a qual as atividades de chamada serão listadas. */        $this->userId = $userId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = 'select                         ca.call_activity_id,                        ca.name,                        ca.description,                        ca.date_start                    from calls_activities_users cau                         join calls_activities ca on cau.call_activity_id = ca.call_activity_id                    where cau.user_id = :userId                        and ca.date_close is null                    group by ca.call_activity_id                    order by ca.call_activity_id desc';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':companyId' na consulta preparada ao valor atual de $this->companyId. */        $this->stmt->bindParam(':userId', $this->userId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados com ou sem paginação relacionados a atividades de chamada.     *     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllCalendar(int $companyId)    {        /** Define o ID da empresa para a qual as atividades de chamada serão listadas. */        $this->companyId = $companyId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = 'select                          cau.*,                          u.name_first,                          u.name_last,                          ca.name as activity_name                        from calls_activities_users cau                            join users u on cau.user_id = u.users_id                            join calls_activities ca on cau.call_activity_id = ca.call_activity_id                        where cau.company_id = :companyId';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':companyId' na consulta preparada ao valor atual de $this->companyId. */        $this->stmt->bindParam(':companyId', $this->companyId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada para um usuário específico.     *     * @param int $userId O ID do usuário para o qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllCalendarByUser(int $userId)    {        /** Define o ID do usuário para o qual as atividades de chamada serão listadas. */        $this->userId = $userId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = 'select                          cau.call_activity_user_id,                          cau.user_id,                          ca.name as activity_name,                          ca.call_activity_type_id,                          ca.call_activity_priority_id,                          ca.call_activity_id,                          ca.date_expected as call_activity_date_expected,                          ca.date_close as call_activity_date_close,                          ca.description as call_activity_description,                          ca.name as call_activity_name,                          c.name as call_name,                          c.call_id,                          u.name_first,                          u.name_last                        from calls_activities_users cau                          join users u on cau.user_id = u.users_id                          join calls_activities ca on cau.call_activity_id = ca.call_activity_id                          join calls_activities_types cat on ca.call_activity_type_id = cat.call_activity_type_id                          join calls c on ca.call_id = c.call_id                        where cau.user_id = :userId                        ORDER BY cau.call_activity_user_id DESC';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':userId' na consulta preparada ao valor atual de $this->userId. */        $this->stmt->bindParam(':userId', $this->userId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para uma chamada e empresa específicas.     *     * @param int $callId O ID da chamada para a qual listar as atividades de chamada não iniciadas.     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllByActivityId(int $callActivityId)    {        /** Define os IDs da chamada e da empresa para as quais as atividades de chamada não iniciadas serão listadas. */        $this->callActivityId = $callActivityId;        $this->table = 'users';        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = 'select                          cat.description as call_activity_type,                          ca.name as activity_name,                          c.name as call_name,                          c.call_id,                          c.date_close as call_date_close,                          ca.call_activity_id,                          ca.date_close as call_activity_date_close,                          cau.call_activity_user_id,                          cau.user_id,                          u.name_first,                          u.name_last,                          (select f.path from files f where f.table = :table and f.register_id = u.users_id order by file_id desc limit 1) as file_path,                          (select f.name from files f where f.table = :table and f.register_id = u.users_id order by file_id desc limit 1) as file_name                        from calls_activities_users cau                          left join users u on cau.user_id = u.users_id                          left join calls_activities ca on cau.call_activity_id = ca.call_activity_id                          left join calls_activities_types cat on ca.call_activity_type_id = cat.call_activity_type_id                          left join calls c on ca.call_id = c.call_id                        where cau.call_activity_id = :callActivityId';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros ':callId' e ':companyId' na consulta preparada aos valores atuais de $this->callId e $this->companyId, respectivamente. */        $this->stmt->bindParam(':callActivityId', $this->callActivityId);        $this->stmt->bindParam(':table', $this->table);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para uma chamada e empresa específicas.     *     * @param int $callId O ID da chamada para a qual listar as atividades de chamada não iniciadas.     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllUserIdByCallId(int $callId)    {        /** Define os IDs da chamada e da empresa para as quais as atividades de chamada não iniciadas serão listadas. */        $this->callId = $callId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = 'select                          cau.user_id,                          c.call_id                         from calls_activities_users cau                          join users u on cau.user_id = u.users_id                          join calls_activities ca on cau.call_activity_id = ca.call_activity_id                          join calls_activities_types cat on ca.call_activity_type_id = cat.call_activity_type_id                          join calls c on ca.call_id = c.call_id                        where c.call_id = :callId                        group by c.call_id, cau.user_id';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros ':callId' e ':companyId' na consulta preparada aos valores atuais de $this->callId e $this->companyId, respectivamente. */        $this->stmt->bindParam(':callId', $this->callId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para um usuário específico.     *     * @param int $userId O ID do usuário para o qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllByUserId(int $userId)    {        /** Define o ID do usuário para o qual as atividades de chamada não iniciadas serão listadas. */        $this->userId = $userId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = 'SELECT                      c.name AS call_name,                      c.preferences,                      ca.*,                      cau.*,                      cap.description AS call_activity_priority                    FROM calls_activities_users cau                        JOIN calls_activities ca ON cau.call_activity_id = ca.call_activity_id                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        JOIN calls c ON ca.call_id = c.call_id                    WHERE cau.user_id = :userId                      AND ca.date_close IS NULL                    ORDER BY cau.call_activity_user_id DESC';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':userId' na consulta preparada ao valor atual de $this->userId. */        $this->stmt->bindParam(':userId', $this->userId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $callId, int $callActivityId, int $companyId)    {        /** Parâmetros de entrada */        $this->callId = $callId;        $this->callActivityId = $callActivityId;        $this->companyId = $companyId;        $this->table = 'users';        /** Consulta SQL */        $this->sql = 'select cau.*,                             u.*,                                                          (select CONCAT(f.path, "/", f.name)                               from files f                               where f.table = :table and f.register_id = u.users_id                               order by file_id desc                               limit 1) as profile_photo,                                                              (select count(call_activity_id)                               from calls_activities_users cau                               where user_id = u.users_id                                and cau.call_id = :callId) as calls_users_activities,                                                         (select count(call_mesage_id)                               from calls_messages cm                               where user_id = u.users_id                                and cm.call_id = :callId) as calls_messages                                                     from calls_activities_users cau		              join users u on cau.user_id = u.users_id		              where cau.call_id = :callId 		              and cau.call_activity_id = :callActivityId 		              and cau.company_id = :companyId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('callId', $this->callId);        $this->stmt->bindParam('callActivityId', $this->callActivityId);        $this->stmt->bindParam('companyId', $this->companyId);        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllUsersLinked(int $callId, int $companyId)    {        /** Parâmetros de entrada */        $this->callId = $callId;        $this->companyId = $companyId;        $this->table = 'users';        /** Consulta SQL */        $this->sql = 'select cau.*,                             u.*,                                                          (select CONCAT(f.path, "/", f.name)                               from files f                               where f.table = :table and f.register_id = u.users_id                               order by file_id desc                               limit 1) as profile_photo,                                                              (select count(call_activity_id)                               from calls_activities_users cau                               where user_id = u.users_id                                and cau.call_id = :callId) as calls_users_activities,                                                         (select count(call_mesage_id)                               from calls_messages cm                               where user_id = u.users_id                                and cm.call_id = :callId) as calls_messages                                                     from calls_activities_users cau		              join users u on cau.user_id = u.users_id		              where cau.call_id = :callId and cau.company_id = :companyId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('callId', $this->callId);        $this->stmt->bindParam('companyId', $this->companyId);        $this->stmt->bindParam('table', $this->table);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Insere um novo registro no banco de dados ou atualiza um registro existente.     *     * @param int $callActivityUserId O ID do usuário associado à atividade de chamada.     * @param int $callActivityId O ID da atividade de chamada.     * @param int $callId O ID da chamada.     * @param int $userId O ID do usuário.     * @param int $companyId O ID da empresa.     * @return bool Retorna true se a operação for bem-sucedida; caso contrário, retorna false.     */    public function Save(int $callActivityUserId, int $callActivityId, int $callId, int $userId, int $companyId)    {        /** Atribui os parâmetros recebidos às propriedades da classe */        $this->callActivityUserId = $callActivityUserId;        $this->callActivityId = $callActivityId;        $this->callId = $callId;        $this->userId = $userId;        $this->companyId = $companyId;        /** Consulta SQL para inserir um novo registro */        $this->sql = 'INSERT INTO calls_activities_users(call_activity_user_id, call_activity_id, call_id, user_id, company_id)                      VALUES (:call_activity_user_id, :call_activity_id, :call_id, :user_id, :company_id)';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preenche os parâmetros do SQL */        $this->stmt->bindParam(':call_activity_user_id', $this->callActivityUserId);        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        $this->stmt->bindParam(':call_id', $this->callId);        $this->stmt->bindParam(':user_id', $this->userId);        $this->stmt->bindParam(':company_id', $this->companyId);        /** Executa a consulta SQL preparada */        return $this->stmt->execute();    }    /**     * Função Delete     *     * Esta função deleta um registro específico da tabela 'calls_activities_users' no banco de dados.     *     * @param int $callActivityUserId O ID do usuário associado à atividade de chamada que será excluído.     *     * @return bool Retorna true se a exclusão for bem-sucedida; caso contrário, retorna false.     */    function Delete(int $callActivityUserId)    {        /**         * Atribui o parâmetro de entrada à propriedade da classe.         */        $this->callActivityUserId = $callActivityUserId;        /**         * Consulta SQL para excluir um registro com base no ID fornecido.         */        $this->sql = 'DELETE FROM calls_activities_users                      WHERE call_activity_user_id = :callActivityUserId';        /**         * Prepara a consulta SQL para execução.         */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /**         * Vincula o parâmetro à consulta SQL.         */        $this->stmt->bindParam('callActivityUserId', $this->callActivityUserId);        /**         * Executa a consulta SQL preparada.         *         * @return bool Retorna true se a execução for bem-sucedida; caso contrário, retorna false.         */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}