<?php/** * Classe CallsActivities.class.php * @filesource * @autor        Keven Willian * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        2.0 * @date          03/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class CallsActivities{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $callActivityId = null;    private $callId = null;    private $callActivityTypeId = null;    private $callActivityPriorityId = null;    private $callActivityLevelId = null;    private $sectionId = null;    private $companyId = null;    private $name = null;    private $description = null;    private $keywords = null;    private $dateExpected = null;    private $dateStart = null;    private $dateClose = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /**     * Obtém registros do banco de dados com limitação baseada no ID da atividade de chamada.     *     * @param int $callActivityId O ID da atividade de chamada a ser consultada.     * @return mixed|null Retorna um objeto representando a linha encontrada no banco de dados ou null se não houver correspondência.     */    public function Get(int $callActivityId)    {        /** Define o ID da atividade de chamada a ser consultada. */        $this->callActivityId = $callActivityId;        /** Define a consulta SQL para selecionar todos os campos da tabela 'calls_activities' onde o ID da atividade de chamada corresponde ao fornecido. */        $this->sql = 'SELECT                           c.call_id,                          c.name as call_name,                          c.description as call_description,                          c.date_close as call_date_close,                          c.preferences,                          ca.*,                           s.name as section_name,                          cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level                      FROM calls_activities ca                        LEFT JOIN sections s ON ca.section_id = s.section_id                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        LEFT JOIN calls c on ca.call_id = c.call_id                      WHERE ca.call_activity_id = :call_activity_id';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':call_activity_id' na consulta preparada ao valor atual de $this->callActivityId. */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto ou null se não houver correspondência. */        return $this->stmt->fetchObject();    }    /**     * Obtém registros do banco de dados com limitação baseada no ID da atividade de chamada.     *     * @param int $callActivityId O ID da atividade de chamada a ser consultada.     * @return mixed|null Retorna um objeto representando a linha encontrada no banco de dados ou null se não houver correspondência.     */    public function GetLast()    {        /** Define a consulta SQL para selecionar todos os campos da tabela 'calls_activities' onde o ID da atividade de chamada corresponde ao fornecido. */        $this->sql = 'SELECT                           c.date_close as call_date_close,                          ca.*,                           cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        JOIN calls c on ca.call_id = c.call_id                      ORDER BY ca.call_activity_id DESC                      LIMIT 1';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto ou null se não houver correspondência. */        return $this->stmt->fetchObject();    }    /**     * Carrega registros do banco de dados com informações específicas da atividade de chamada.     *     * @param int $callActivityId O ID da atividade de chamada para a qual carregar os registros.     * @return mixed|null Retorna um objeto representando os registros encontrados ou null se não houver correspondência.     */    public function Load(int $callActivityId)    {        /** Define o ID da atividade de chamada para a qual os registros serão carregados. */        $this->callActivityId = $callActivityId;        /** Define a consulta SQL para selecionar campos específicos de 'calls_activities' e 'calls' usando uma junção. */        $this->sql = 'SELECT c.call_id,                         c.name as calls_name,                         ca.call_activity_id,                         ca.name as calls_activities_name,                         ca.date_expected                  FROM calls_activities ca                   JOIN calls c ON ca.call_id = c.call_id                   WHERE call_activity_id = :call_activity_id';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':call_activity_id' na consulta preparada ao valor atual de $this->callActivityId. */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto ou null se não houver correspondência. */        return $this->stmt->fetchObject();    }    /**     * Lista todos os registros do banco de dados com ou sem paginação relacionados a atividades de chamada.     *     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllGraph()    {        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = "select count(ca.call_activity_id) as quantity, DATE_FORMAT(ca.date_close, '%Y-%m') as month_year from calls_activities ca                         where ca.date_close is not null                         group by month_year                        order by month_year asc";        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados com ou sem paginação relacionados a atividades de chamada.     *     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllCalendar(int $companyId)    {        /** Define o ID da empresa para a qual as atividades de chamada serão listadas. */        $this->companyId = $companyId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = 'SELECT ca.*                      FROM calls_activities ca                      WHERE ca.company_id = :companyId';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':companyId' na consulta preparada ao valor atual de $this->companyId. */        $this->stmt->bindParam(':companyId', $this->companyId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados com ou sem paginação relacionados a atividades de chamada.     *     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllCalendarByCallId(int $callId)    {        /** Define o ID da empresa para a qual as atividades de chamada serão listadas. */        $this->callId = $callId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e tabelas relacionadas usando junções. */        $this->sql = 'SELECT ca.*                      FROM calls_activities ca                      WHERE ca.call_id = :callId';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':companyId' na consulta preparada ao valor atual de $this->companyId. */        $this->stmt->bindParam(':callId', $this->callId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Método All     *83     * Este método lista todos os registros do banco de dados associados a uma chamada (call) e empresa (company),     * podendo incluir ou não a funcionalidade de paginação.     *     * @param int $callId O identificador único da chamada.     * @param int $companyId O identificador único da empresa.     *     * @return array Retorna um array contendo todos os registros da tabela 'calls_activities' associados à chamada e empresa fornecidas.     * Cada registro é representado como um objeto (stdClass) com propriedades correspondentes às colunas da tabela,     * incluindo também a descrição da atividade de chamada através da propriedade 'call_activity_type'.     */    public function All(int $callId)    {        /** Parâmetros de entrada */        $this->callId = $callId;        /** Consulta SQL */        $this->sql = 'SELECT                           c.date_close as call_date_close,                          ca.*,                           cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        JOIN calls c on ca.call_id = c.call_id                      WHERE ca.call_id = :callId                        AND ca.section_id is null                      ORDER BY ca.call_activity_id DESC';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':callId', $this->callId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado como um array de objetos (stdClass) */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para uma chamada e empresa específicas.     *     * @param int $callId O ID da chamada para a qual listar as atividades de chamada não iniciadas.     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllBySectionId(int $sectionId)    {        /** Define os IDs da chamada e da empresa para as quais as atividades de chamada não iniciadas serão listadas. */        $this->sectionId = $sectionId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = 'SELECT                           c.date_close as call_date_close,                          ca.*,                           cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        JOIN calls c on ca.call_id = c.call_id                      WHERE ca.section_id = :sectionId                      ORDER BY ca.call_activity_id DESC';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros ':callId' e ':companyId' na consulta preparada aos valores atuais de $this->callId e $this->companyId, respectivamente. */        $this->stmt->bindParam(':sectionId', $this->sectionId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Método All     *     * Este método lista todos os registros do banco de dados associados a uma chamada (call) e empresa (company),     * podendo incluir ou não a funcionalidade de paginação.     *     * @param int $callId O identificador único da chamada.     * @param int $companyId O identificador único da empresa.     *     * @return array Retorna um array contendo todos os registros da tabela 'calls_activities' associados à chamada e empresa fornecidas.     * Cada registro é representado como um objeto (stdClass) com propriedades correspondentes às colunas da tabela,     * incluindo também a descrição da atividade de chamada através da propriedade 'call_activity_type'.     */    public function AllByCompanyIdAndUserId(int $companyId, int $userId)    {        /** Parâmetros de entrada */        $this->companyId = $companyId;        $this->userId = $userId;        /** Consulta SQL */        $this->sql = 'SELECT                           c.name as call_name,                          c.date_close as call_date_close,                          ca.*,                           cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        LEFT JOIN calls_activities_users cau ON ca.call_activity_id = cau.call_activity_id                        JOIN calls c on ca.call_id = c.call_id                      WHERE ca.company_id = :companyId                        AND ca.date_close is null                        AND c.date_close is null                        AND ca.call_activity_id not in (select call_activity_id from calls_activities_users where user_id = :userId)                      group by ca.call_activity_id                       ORDER BY ca.call_activity_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':companyId', $this->companyId);        $this->stmt->bindParam(':userId', $this->userId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado como um array de objetos (stdClass) */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para uma chamada e empresa específicas.     *     * @param int $callId O ID da chamada para a qual listar as atividades de chamada não iniciadas.     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function Search(string $text)    {        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = "SELECT                           ca.*,                          c.name as call_name,                          c.call_id,                          c.preferences,                          c.date_close as call_date_close,                          cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level,                          s.name as section_name                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        LEFT JOIN calls c on ca.call_id = c.call_id                        LEFT JOIN sections s ON ca.section_id = s.section_id                      WHERE ca.name LIKE CONCAT('%', :text, '%')                        OR ca.description LIKE CONCAT('%', :text, '%')                        OR c.name LIKE CONCAT('%', :text, '%')                        OR c.description LIKE CONCAT('%', :text, '%')                      ORDER BY ca.call_activity_id DESC;";        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros ':callId' e ':companyId' na consulta preparada aos valores atuais de $this->callId e $this->companyId, respectivamente. */        $this->stmt->bindParam(':text', $text);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Lista todos os registros do banco de dados relacionados a atividades de chamada não iniciadas para uma chamada e empresa específicas.     *     * @param int $callId O ID da chamada para a qual listar as atividades de chamada não iniciadas.     * @param int $companyId O ID da empresa para a qual listar as atividades de chamada não iniciadas.     * @return array Retorna um array de objetos representando os registros encontrados ou um array vazio se não houver correspondência.     */    public function AllByCompanyId(int $companyId)    {        /** Define os IDs da chamada e da empresa para as quais as atividades de chamada não iniciadas serão listadas. */        $this->companyId = $companyId;        /** Define a consulta SQL para selecionar diversos campos de 'calls_activities' e 'calls_activities_types' usando junções. */        $this->sql = 'SELECT                           ca.*,                          c.name as call_name,                          c.call_id,                          c.preferences,                          cat.description as call_activity_type,                          cap.description as call_activity_priority,                          cal.description as call_activity_level,                          s.name as section_name                      FROM calls_activities ca                        LEFT JOIN calls_activities_types cat ON ca.call_activity_type_id = cat.call_activity_type_id                        LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                        LEFT JOIN calls_activities_levels cal ON ca.call_activity_level_id = cal.call_activity_level_id                        LEFT JOIN calls c on ca.call_id = c.call_id                        LEFT JOIN sections s ON ca.section_id = s.section_id                      WHERE ca.company_id = :companyId                        AND ca.date_close is null                      ORDER BY ca.call_activity_id DESC';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros ':callId' e ':companyId' na consulta preparada aos valores atuais de $this->callId e $this->companyId, respectivamente. */        $this->stmt->bindParam(':companyId', $this->companyId);        /** Executa a consulta preparada. */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos ou um array vazio se não houver correspondência. */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Insere um novo registro no banco de dados ou atualiza um registro existente, com base na chave única (call_activity_id).     *     * @param int $callActivityId O ID da atividade de chamada (chave primária).     * @param int $callId O ID da chamada associada à atividade.     * @param int $sectionId O ID da seção associada à atividade.     * @param int $companyId O ID da empresa associada à atividade.     * @param string $name O nome da atividade.     * @param string $description A descrição da atividade.     * @param string $keywords As palavras-chave relacionadas à atividade.     * @return bool Retorna true se a operação for bem-sucedida e false em caso de falha.     */    public function Save(int $callActivityId, int $callId, int $companyId, int $sectionId, string $name, string $description, string $keywords)    {        /** Define os parâmetros da atividade de chamada. */        $this->callActivityId = $callActivityId;        $this->callId = $callId;        $this->sectionId = $sectionId;        $this->companyId = $companyId;        $this->name = $name;        $this->description = $description;        $this->keywords = $keywords;        /** Define a consulta SQL para inserir ou atualizar os dados na tabela 'calls_activities'. */        $this->sql = 'INSERT INTO calls_activities (call_activity_id,                                                     call_id,                                                     section_id,                                                    company_id,                                                    name,                                                     description,                                                     keywords)                       VALUES (:call_activity_id,                               :call_id,                               :section_id,                              :company_id,                              :name,                              :description,                              :keywords)                      ON DUPLICATE KEY UPDATE call_id = :call_id,                                              section_id = :section_id,                                              company_id = :company_id,                                              name = :name,                                              description = :description,                                              keywords = :keywords';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula os parâmetros na consulta preparada aos valores atuais. */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId, $this->callActivityId > 0 ? \PDO::PARAM_INT : \PDO::PARAM_NULL);        $this->stmt->bindParam(':call_id', $this->callId, $this->callId > 0 ? \PDO::PARAM_INT : \PDO::PARAM_NULL);        $this->stmt->bindParam(':section_id', $this->sectionId, $this->sectionId > 0 ? \PDO::PARAM_INT : \PDO::PARAM_NULL);        $this->stmt->bindParam(':company_id', $this->companyId, $this->companyId > 0 ? \PDO::PARAM_INT : \PDO::PARAM_NULL);        $this->stmt->bindParam(':name', $this->name, !empty($this->name) ? \PDO::PARAM_STR : \PDO::PARAM_NULL);        $this->stmt->bindParam(':description', $this->description, !empty($this->description) ? \PDO::PARAM_STR : \PDO::PARAM_NULL);        $this->stmt->bindParam(':keywords', $this->keywords, !empty($this->keywords) ? \PDO::PARAM_STR : \PDO::PARAM_NULL);        /** Executa a consulta preparada e retorna true se bem-sucedida, false caso contrário. */        return $this->stmt->execute();    }    /**     * Método SaveClose     *     * Este método atualiza um registro existente na tabela 'calls_activities' no banco de dados,     * atribuindo uma data de fechamento e um histórico à atividade de chamada identificada pelos parâmetros fornecidos.     *     * @param int $callActivityId O identificador único da atividade de chamada a ser atualizada.     * @param int $callId O identificador único da chamada associada à atividade.     * @param string $dateClose A data de fechamento a ser atribuída à atividade de chamada (formato esperado: 'YYYY-MM-DD').     * @param string $history O histórico a ser atribuído à atividade de chamada.     *     * @return bool Retorna true se a atualização for bem-sucedida, ou false caso contrário.     */    public function SaveClose(int $callActivityId, string $dateClose)    {        /** Parâmetros */        $this->callActivityId = $callActivityId;        $this->dateClose = $dateClose;        /** Consulta SQL para atualização */        $this->sql = 'UPDATE calls_activities SET                       date_close = :date_close                      WHERE call_activity_id = :call_activity_id;';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        $this->stmt->bindParam(':date_close', $this->dateClose);        /** Executo o SQL e retorno o resultado (true ou false) */        return $this->stmt->execute();    }    /**     * Método SaveOpen     *     * Este método atualiza um registro existente na tabela 'calls_activities' no banco de dados,     * removendo a data de fechamento e atualizando o histórico da atividade de chamada identificada pelos parâmetros fornecidos.     *     * @param int $callActivityId O identificador único da atividade de chamada a ser atualizada.     * @param int $callId O identificador único da chamada associada à atividade.     * @param string $history O novo histórico a ser atribuído à atividade de chamada.     *     * @return bool Retorna true se a atualização for bem-sucedida, ou false caso contrário.     */    public function SaveOpen(int $callActivityId)    {        /** Parâmetros */        $this->callActivityId = $callActivityId;        /** Consulta SQL para atualização */        $this->sql = 'UPDATE calls_activities SET                       date_close = null                      WHERE call_activity_id = :call_activity_id';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        /** Executo o SQL e retorno o resultado (true ou false) */        return $this->stmt->execute();    }    /**     * Método para salvar o tipo de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId       ID da atividade de chamada a ser atualizada.     * @param string $callActivityTypeId   Novo tipo de atividade de chamada a ser atribuído.     *     * @return bool                         Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveName(int $callId, int $callActivityId, int $section_id, int $company_id, string $name)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callId = $callId;        $this->callActivityId = $callActivityId;        $this->sectionId = $section_id;        $this->companyId = $company_id;        $this->name = $name;        /** Define a consulta SQL para atualizar o tipo de atividade de chamada no banco de dados */        $this->sql = 'INSERT INTO calls_activities (call_id,                                                     call_activity_id,                                                     section_id,                                                    company_id,                                                    name)                       VALUES (:callId,                               :callActivityId,                               :sectionId,                              :companyId,                              :name)                      ON DUPLICATE KEY UPDATE call_id = :callId,                                              section_id = :sectionId,                                              company_id = :companyId,                                              name = :name';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callId', $this->callId, \PDO::PARAM_INT);        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':sectionId', $this->sectionId, \PDO::PARAM_STR);        $this->stmt->bindParam(':companyId', $this->companyId, \PDO::PARAM_STR);        $this->stmt->bindParam(':name', $this->name, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o tipo de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId       ID da atividade de chamada a ser atualizada.     * @param string $callActivityTypeId   Novo tipo de atividade de chamada a ser atribuído.     *     * @return bool                         Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveDescription(int $callActivityId, string $description)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->description = $description;        /** Define a consulta SQL para atualizar o tipo de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET description = :description                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':description', $this->description, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o tipo de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId       ID da atividade de chamada a ser atualizada.     * @param string $callActivityTypeId   Novo tipo de atividade de chamada a ser atribuído.     *     * @return bool                         Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveCallActivityTypeId(int $callActivityId, int $callActivityTypeId)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->callActivityTypeId = $callActivityTypeId;        /** Define a consulta SQL para atualizar o tipo de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET call_activity_type_id = :callActivityTypeId                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':callActivityTypeId', $this->callActivityTypeId, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o ID de prioridade de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId            ID da atividade de chamada a ser atualizada.     * @param string $callActivityPriorityId    Novo ID de prioridade de atividade de chamada a ser atribuído.     *     * @return bool                             Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveCallActivityPriorityId(int $callActivityId, int $callActivityPriorityId)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->callActivityPriorityId = $callActivityPriorityId;        /** Define a consulta SQL para atualizar o ID de prioridade de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET call_activity_priority_id = :callActivityPriorityId                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':callActivityPriorityId', $this->callActivityPriorityId, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o ID de prioridade de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId            ID da atividade de chamada a ser atualizada.     * @param string $callActivityPriorityId    Novo ID de prioridade de atividade de chamada a ser atribuído.     *     * @return bool                             Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveCallActivityLevelId(int $callActivityId, int $callActivityLevelId)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->callActivityLevelId = $callActivityLevelId;        /** Define a consulta SQL para atualizar o ID de prioridade de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET call_activity_level_id = :callActivityLevelId                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':callActivityLevelId', $this->callActivityLevelId, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o ID de prioridade de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId            ID da atividade de chamada a ser atualizada.     * @param string $callActivityPriorityId    Novo ID de prioridade de atividade de chamada a ser atribuído.     *     * @return bool                             Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveSectionId(int $callActivityId, int $sectionId)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->sectionId = $sectionId;        /** Define a consulta SQL para atualizar o ID de prioridade de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET section_id = :sectionId                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':sectionId', $this->sectionId, \PDO::PARAM_INT);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o ID de prioridade de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId            ID da atividade de chamada a ser atualizada.     * @param string $callActivityPriorityId    Novo ID de prioridade de atividade de chamada a ser atribuído.     *     * @return bool                             Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveDateExpected(int $callActivityId, string $dateExpected)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->dateExpected = $dateExpected;        /** Define a consulta SQL para atualizar o ID de prioridade de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET date_expected = :dateExpected                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':dateExpected', $this->dateExpected, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método para salvar o ID de prioridade de atividade de chamada em um novo registro no banco de dados.     *     * @param int    $callActivityId            ID da atividade de chamada a ser atualizada.     * @param string $callActivityPriorityId    Novo ID de prioridade de atividade de chamada a ser atribuído.     *     * @return bool                             Retorna true se a execução da consulta for bem-sucedida, caso contrário, false.     */    public function SaveCallId(int $callActivityId, int $callId)    {        /** Define os parâmetros recebidos como propriedades da classe */        $this->callActivityId = $callActivityId;        $this->callId = $callId;        /** Define a consulta SQL para atualizar o ID de prioridade de atividade de chamada no banco de dados */        $this->sql = 'UPDATE calls_activities SET call_id = :callId                      WHERE call_activity_id = :callActivityId';        /** Prepara a consulta SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Atribui os valores aos parâmetros da consulta preparada */        $this->stmt->bindParam(':callActivityId', $this->callActivityId, \PDO::PARAM_INT);        $this->stmt->bindParam(':callId', $this->callId, \PDO::PARAM_STR);        /** Executa a consulta SQL e retorna o resultado da execução (true se bem-sucedida, false caso contrário) */        return $this->stmt->execute();    }    /**     * Método CountCallActivityPriorityId     *     * Este método conta a quantidade de atividades de chamada agrupadas por prioridade, associadas a uma chamada específica,     * e retorna um conjunto de informações incluindo a identificação da prioridade, a descrição, o total de prioridades e o total de atividades.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return array Retorna um array de objetos (stdClass) representando as informações sobre as prioridades das atividades de chamada.     * Cada objeto contém propriedades como 'call_activity_priority_id', 'description', 'total_priorities' e 'total_activities'.     * O array pode estar vazio se não houver atividades correspondentes.     */    public function CountCallActivityPriorityId(int $callId)    {        /** Parâmetros */        $this->callId = $callId;        /** Consulta SQL para contagem de atividades agrupadas por prioridade */        $this->sql = 'SELECT                       ca.call_activity_priority_id,                      cap.description,                      COUNT(ca.call_activity_priority_id) AS total_priorities,                      (SELECT COUNT(call_activity_id) FROM calls_activities WHERE call_id = ca.call_id) AS total_activities                      FROM calls_activities ca                       LEFT JOIN calls_activities_priorities cap ON ca.call_activity_priority_id = cap.call_activity_priority_id                      WHERE ca.call_id = :callId                      GROUP BY ca.call_activity_priority_id';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':callId', $this->callId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um array de objetos (stdClass) */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /**     * Método CountClosedAndTotal     *     * Este método conta o número total de atividades de chamada fechadas e o número total de atividades de chamada associadas a uma chamada específica.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return object|null Retorna um objeto (stdClass) contendo as informações sobre o número total de atividades de chamada fechadas     * e o número total de atividades de chamada associadas à chamada fornecida. Retorna null se não houver atividades fechadas correspondentes.     * As propriedades do objeto incluem 'call_id', 'total_calls_activities_closed' e 'total_calls_activities'.     */    public function CountClosedAndTotal(int $callId)    {        /** Parâmetros */        $this->callId = $callId;        /** Consulta SQL para contagem de atividades fechadas e totais */        $this->sql = 'SELECT                       ca.call_id,                      (SELECT COUNT(call_activity_id) FROM calls_activities WHERE call_id = ca.call_id and date_close is not null) AS total_calls_activities_closed,                      (SELECT COUNT(call_activity_id) FROM calls_activities WHERE call_id = ca.call_id) AS total_calls_activities                      FROM calls_activities ca                       WHERE ca.call_id = :callId                      GROUP BY ca.call_id';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':callId', $this->callId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto (stdClass) ou null se não houver atividades fechadas correspondentes */        return $this->stmt->fetchObject();    }    /**     * Método CountClosedAndTotal     *     * Este método conta o número total de atividades de chamada fechadas e o número total de atividades de chamada associadas a uma chamada específica.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return object|null Retorna um objeto (stdClass) contendo as informações sobre o número total de atividades de chamada fechadas     * e o número total de atividades de chamada associadas à chamada fornecida. Retorna null se não houver atividades fechadas correspondentes.     * As propriedades do objeto incluem 'call_id', 'total_calls_activities_closed' e 'total_calls_activities'.     */    public function CountPending(int $companyId)    {        /** Parâmetros */        $this->companyId = $companyId;        /** Consulta SQL para contagem de atividades fechadas e totais */        $this->sql = 'select                         count(ca.call_activity_id) as quantity                      from calls_activities ca                         where ca.date_close is null                        and ca.company_id = :companyId';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':companyId', $this->companyId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto (stdClass) ou null se não houver atividades fechadas correspondentes */        return $this->stmt->fetchObject();    }    /**     * Método CountClosedAndTotal     *     * Este método conta o número total de atividades de chamada fechadas e o número total de atividades de chamada associadas a uma chamada específica.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return object|null Retorna um objeto (stdClass) contendo as informações sobre o número total de atividades de chamada fechadas     * e o número total de atividades de chamada associadas à chamada fornecida. Retorna null se não houver atividades fechadas correspondentes.     * As propriedades do objeto incluem 'call_id', 'total_calls_activities_closed' e 'total_calls_activities'.     */    public function CountStarted(int $companyId)    {        /** Parâmetros */        $this->companyId = $companyId;        /** Consulta SQL para contagem de atividades fechadas e totais */        $this->sql = 'select                         count(ca.call_activity_id) as quantity                      from calls_activities ca                         where ca.date_close is null                        and ca.company_id = :companyId';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':companyId', $this->companyId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto (stdClass) ou null se não houver atividades fechadas correspondentes */        return $this->stmt->fetchObject();    }    /**     * Método CountClosedAndTotal     *     * Este método conta o número total de atividades de chamada fechadas e o número total de atividades de chamada associadas a uma chamada específica.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return object|null Retorna um objeto (stdClass) contendo as informações sobre o número total de atividades de chamada fechadas     * e o número total de atividades de chamada associadas à chamada fornecida. Retorna null se não houver atividades fechadas correspondentes.     * As propriedades do objeto incluem 'call_id', 'total_calls_activities_closed' e 'total_calls_activities'.     */    public function CountClosed(int $companyId)    {        /** Parâmetros */        $this->companyId = $companyId;        /** Consulta SQL para contagem de atividades fechadas e totais */        $this->sql = 'select                         count(ca.call_activity_id) as quantity                      from calls_activities ca                         where ca.date_close is not null                        and ca.company_id = :companyId';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':companyId', $this->companyId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto (stdClass) ou null se não houver atividades fechadas correspondentes */        return $this->stmt->fetchObject();    }    /**     * Método CountClosedAndTotal     *     * Este método conta o número total de atividades de chamada fechadas e o número total de atividades de chamada associadas a uma chamada específica.     *     * @param int $callId O identificador único da chamada para a qual as atividades serão contadas.     *     * @return object|null Retorna um objeto (stdClass) contendo as informações sobre o número total de atividades de chamada fechadas     * e o número total de atividades de chamada associadas à chamada fornecida. Retorna null se não houver atividades fechadas correspondentes.     * As propriedades do objeto incluem 'call_id', 'total_calls_activities_closed' e 'total_calls_activities'.     */    public function CountDelay(int $companyId)    {        /** Parâmetros */        $this->companyId = $companyId;        /** Consulta SQL para contagem de atividades fechadas e totais */        $this->sql = 'select                        count(ca.call_activity_id) as quantity                      from calls_activities ca                         where ca.date_expected < curdate()                         and ca.date_close is null                        and ca.company_id = :companyId';        /** Preparo o SQL para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':companyId', $this->companyId, \PDO::PARAM_INT);        /** Executa a consulta preparada */        $this->stmt->execute();        /** Retorna o resultado da consulta como um objeto (stdClass) ou null se não houver atividades fechadas correspondentes */        return $this->stmt->fetchObject();    }    /**     * Deleta um determinado registro no banco de dados da tabela 'calls_activities' com base no ID da atividade de chamada.     *     * @param int $callActivityId O ID da atividade de chamada a ser excluída.     * @return bool Retorna true se a exclusão for bem-sucedida e false em caso de falha.     */    function Delete(int $callActivityId)    {        /** Define o ID da atividade de chamada a ser excluída. */        $this->callActivityId = $callActivityId;        /** Define a consulta SQL para excluir o registro com base no ID da atividade de chamada. */        $this->sql = 'DELETE FROM calls_activities                      WHERE call_activity_id = :call_activity_id';        /** Prepara a declaração SQL para execução. */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Vincula o parâmetro ':call_activity_id' na consulta preparada ao valor atual de $this->callActivityId. */        $this->stmt->bindParam(':call_activity_id', $this->callActivityId);        /** Executa a consulta preparada e retorna true se a exclusão for bem-sucedida, false caso contrário. */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}