<?php/** * Classe ProductsVersionsReleases.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            18/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class ProductsVersionsReleases{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $productVersionReleaseId = null;    private $productVersionId = null;    private $description = null;    private $number = null;    private $status = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $productVersionReleaseId)    {        /** Parametros de entrada */        $this->productVersionReleaseId = $productVersionReleaseId;        /** Consulta SQL */        $this->sql = 'select pvr.*, pv.product_id from                       products_versions_releases pvr                      join products_versions pv on pvr.product_version_id = pv.product_version_id					  where product_version_release_id = :product_version_release_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':product_version_release_id', $this->productVersionReleaseId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista os registros do banco de dados com limitação */    public function Load(int $productVersionReleaseId)    {        /** Parametros de entrada */        $this->productVersionReleaseId = $productVersionReleaseId;        /** Consulta SQL */        $this->sql = 'select pvr.product_version_release_id,                              pv.product_version_id,                              p.products_id,                             p.name,                             pv.description,                             pv.number,                             pvr.description as description_release,                             pvr.number as number_release,                             pvr.status                             from products_versions_releases pvr                      join products_versions pv on pvr.product_version_id = pv.product_version_id                      join products p on pv.product_id = p.products_id                      where pvr.product_version_release_id = :productVersionReleaseId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':productVersionReleaseId', $this->productVersionReleaseId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllCountableReleases(int $companyId)    {        /** Parametros */        $this->companyId = $companyId;        /** Consulta SQL */        $this->sql = 'SELECT                          count(pvr.product_version_release_id) as quantity,                          p.name                        FROM products p                          join products_versions pv on p.products_id = pv.product_id                          join products_versions_releases pvr on pv.product_version_id = pvr.product_version_id                        where p.company_id = :companyId                        group by p.products_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('companyId', $this->companyId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllCountable(int $companyId)    {        /** Parametros */        $this->companyId = $companyId;        /** Consulta SQL */        $this->sql = 'select                          count(pvr.product_version_release_id) as quantity,                          pvr.status,                          pvr.status,                          CASE WHEN status = 1                            THEN \'Desenvolvimento\'                          WHEN status = 2                            THEN \'Homologação\'                          WHEN status = 3                            THEN \'Produção\'                          WHEN status = 4                            THEN \'Encerrado\'                          END                                   AS status_name                        from products_versions_releases pvr                          join products_versions pv on pvr.product_version_id = pv.product_version_id                          join products p on pv.product_id = p.products_id                        where p.company_id = :companyId                        group by pvr.status';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('companyId', $this->companyId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllDownloadable(int $companyId)    {        /** Parametros */        $this->companyId = $companyId;        /** Consulta SQL */        $this->sql = 'select                          p.name,                          pv.number  as number_version,                          pvr.product_version_release_id,                          pvr.number as number_release,                          pvr.status                        from products_versions_releases pvr                          join products_versions pv on pvr.product_version_id = pv.product_version_id                          join products p on pv.product_id = p.products_id                        where pvr.status in (2, 3)                              and p.company_id = :companyId                              order by p.name ASC';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('companyId', $this->companyId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $productVersionId, int $status)    {        /** Parametros */        $this->productVersionId = $productVersionId;        $this->status = $status;        /** Consulta SQL */        $this->sql = 'select                      pvr.*,                      pvr.status,                      pv.product_id,                      CASE WHEN status = 1                        THEN \'Desenvolvimento\'                      WHEN status = 2                        THEN \'Homologação\'                      WHEN status = 3                        THEN \'Produção\'                      WHEN status = 4                        THEN \'Encerrado\'                      END AS status_name                    from products_versions_releases pvr                    join products_versions pv on pvr.product_version_id = pv.product_version_id                    where pvr.product_version_id = :productVersionId                    and pvr.status = :status                    order by pvr.product_version_release_id desc';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('productVersionId', $this->productVersionId);        $this->stmt->bindParam('status', $this->status);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Insere um novo registro no banco */    public function Save(int $productVersionReleaseId, string $productVersionId, string $description, string $number, string $status, string $history)    {        /** Parametros */        $this->productVersionReleaseId = $productVersionReleaseId;        $this->productVersionId = $productVersionId;        $this->description = $description;        $this->number = $number;        $this->status = $status;        $this->history = $history;        /** Verifica se o ID do registro foi informado */        if ($this->productVersionReleaseId > 0) {            /** Consulta SQL */            $this->sql = 'update products_versions_releases set product_version_id = :product_version_id,									   	     description = :description,									   	     number = :number,									   	     status = :status,									   	     history = :history					  	  where product_version_release_id = :product_version_release_id';        } else {//Se o ID não foi informado, grava-se um novo registro            /** Consulta SQL */            $this->sql = 'insert into products_versions_releases(product_version_release_id, 											  product_version_id, 											  description, 											  number, 											  status, 											  history 								 	 ) values (:product_version_release_id, 									  		   :product_version_id,									  		   :description,									  		   :number,									  		   :status,									  		   :history)';        }        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('product_version_release_id', $this->productVersionReleaseId);        $this->stmt->bindParam('product_version_id', $this->productVersionId);        $this->stmt->bindParam('description', $this->description);        $this->stmt->bindParam('number', $this->number);        $this->stmt->bindParam('status', $this->status);        $this->stmt->bindParam('history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Insere um novo registro no banco */    public function SaveHistory(int $productVersionReleaseId, string $history) : bool    {        /** Parametros */        $this->productVersionReleaseId = $productVersionReleaseId;        $this->history = $history;        /** Consulta SQL */        $this->sql = 'update products_versions_releases set history = :history					  	  where product_version_release_id = :product_version_release_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('product_version_release_id', $this->productVersionReleaseId);        $this->stmt->bindParam('history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $productVersionReleaseId)    {        /** Parametros de entrada */        $this->productVersionReleaseId = $productVersionReleaseId;        /** Consulta SQL */        $this->sql = 'delete from products_versions_releases					  where  product_version_release_id = :product_version_release_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('product_version_release_id', $this->productVersionReleaseId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}