<?php/** * Classe Products.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            18/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class Products{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $start = null;    private $max = null;    private $limit = null;    private $productsId = null;    private $companyId = null;    private $productsTypeId = null;    private $name = null;    private $description = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Carrega os campos de uma tabela */    public function Describe()    {        /** Consulta SQL */        $this->sql = "describe products";        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        $this->field = $this->stmt->fetchAll(\PDO::FETCH_OBJ);        /** Declara o objeto */        $resultDescribe = new \stdClass();        $Field = '';        /** Lista os campos da tabela para objetos */        foreach ($this->field as $UsersKey => $Result) {            /** Pega o nome do Field/Campo */            $Field = $Result->Field;            /** Carrega os objetos como null */            $resultDescribe->$Field = null;        }        /** Retorna os campos declarados como vazios */        return $resultDescribe;    }    /** Lista os registros do banco de dados com limitação */    public function AllLoad(int $productsId)    {        /** Parametros de entrada */        $this->productsId = $productsId;        /** Consulta SQL */        $this->sql = 'select                      pvr.status,                      CASE WHEN status = 1                        THEN \'Desenvolvimento\'                      WHEN status = 2                        THEN \'Homologação\'                      WHEN status = 3                        THEN \'Produção\'                      WHEN status = 4                        THEN \'Encerrado\'                      END AS status_name,                      count(pvr.status) as quantity                    from products p                      join products_versions pv on p.products_id = pv.product_id                      join products_versions_releases pvr on pv.product_version_id = pvr.product_version_id                    where p.products_id = :products_id                    group by pvr.status';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':products_id', $this->productsId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista os registros do banco de dados com limitação */    public function Load(int $productsId)    {        /** Parametros de entrada */        $this->productsId = $productsId;        /** Consulta SQL */        $this->sql = 'select                        p.products_id,                        p.name,                        p.description,                        pt.description as description_product_type                      from products p                      join products_type pt on p.products_type_id = pt.products_type_id					  where products_id = :products_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':products_id', $this->productsId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $productsId)    {        /** Parametros de entrada */        $this->productsId = $productsId;        /** Consulta SQL */        $this->sql = 'select * from products  					  where products_id = :products_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':products_id', $this->productsId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All()    {        /** Consulta SQL */        $this->sql = 'select * from products';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllWhereSistemaIdIsNotNull()    {        /** Consulta SQL */        $this->sql = 'select * from products                      where sistema_id is not null';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function AllNoLimit($companyId)    {        /** Parametros de entrada */        $this->companyId = $companyId;        /** Consulta SQL */        $this->sql = 'select * from products where company_id = :companyId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('companyId', $this->companyId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Conta a quantidades de registros */    public function Count()    {        /** Consulta SQL */        $this->sql = 'select count(products_id) as qtde					  from products ';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject()->qtde;    }    /** Insere um novo registro no banco */    public function Save(int $productsId, string $companyId, string $productsTypeId, string $name, string $description)    {        /** Parametros */        $this->productsId = $productsId;        $this->companyId = $companyId;        $this->productsTypeId = $productsTypeId;        $this->name = $name;        $this->description = $description;        /** Verifica se o ID do registro foi informado */        if ($this->productsId > 0) {            /** Consulta SQL */            $this->sql = 'update products set company_id = :company_id,									   	     products_type_id = :products_type_id,									   	     name = :name,									   	     description = :description					  	  where products_id = :products_id';        } else {//Se o ID não foi informado, grava-se um novo registro            /** Consulta SQL */            $this->sql = 'insert into products(products_id, 											  company_id, 											  products_type_id, 											  name, 											  description 								 	 ) values (:products_id, 									  		   :company_id,									  		   :products_type_id,									  		   :name,									  		   :description)';        }        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('products_id', $this->productsId);        $this->stmt->bindParam('company_id', $this->companyId);        $this->stmt->bindParam('products_type_id', $this->productsTypeId);        $this->stmt->bindParam('name', $this->name);        $this->stmt->bindParam('description', $this->description);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $productsId)    {        /** Parametros de entrada */        $this->productsId = $productsId;        /** Consulta SQL */        $this->sql = 'delete from products					  where  products_id = :products_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('products_id', $this->productsId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}