<?php/** * Classe ProductsVersionsReleasesFiles.class.php * @filesource * @autor        Kenio de Souza * @copyright    Copyright 2022 - Souza Consultoria Tecnológica * @package        vendor * @subpackage    model * @version        1.0 * @date            19/04/2022 *//** Defino o local onde esta a classe */namespace vendor\model;class ProductsVersionsReleasesFiles{    /** Declaro as vaiavéis da classe */    private $connection = null;    private $sql = null;    private $stmt = null;    private $start = null;    private $max = null;    private $limit = null;    private $productVersionReleaseFileId = null;    private $productVersionReleaseId = null;    private $name = null;    private $path = null;    private $history = null;    /** Construtor da classe */    function __construct()    {        /** Cria o objeto de conexão com o banco de dados */        $this->connection = new Mysql();    }    /** Carrega os campos de uma tabela */    public function Describe()    {        /** Consulta SQL */        $this->sql = "describe products_versions_releases_files";        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        $this->field = $this->stmt->fetchAll(\PDO::FETCH_OBJ);        /** Declara o objeto */        $resultDescribe = new \stdClass();        $Field = '';        /** Lista os campos da tabela para objetos */        foreach ($this->field as $UsersKey => $Result) {            /** Pega o nome do Field/Campo */            $Field = $Result->Field;            /** Carrega os objetos como null */            $resultDescribe->$Field = null;        }        /** Retorna os campos declarados como vazios */        return $resultDescribe;    }    /** Lista os registros do banco de dados com limitação */    public function Get(int $productVersionReleaseFileId)    {        /** Parametros de entrada */        $this->productVersionReleaseFileId = $productVersionReleaseFileId;        /** Consulta SQL */        $this->sql = 'select * from products_versions_releases_files  					  where product_version_release_file_id = :product_version_release_file_id';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam(':product_version_release_file_id', $this->productVersionReleaseFileId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function All(int $productVersionReleaseId)    {        /** Parametros */        $this->productVersionReleaseId = $productVersionReleaseId;        /** Consulta SQL */        $this->sql = 'select * from products_versions_releases_files where product_version_release_id = :productVersionReleaseId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('productVersionReleaseId', $this->productVersionReleaseId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchAll(\PDO::FETCH_OBJ);    }    /** Lista todos os egistros do banco com ou sem paginação*/    public function GetLoad(int $productVersionReleaseId)    {        /** Parametros */        $this->productVersionReleaseId = $productVersionReleaseId;        /** Consulta SQL */        $this->sql = 'select p.products_id, pv.product_version_id, pvr.product_version_release_id                        from products_versions_releases pvr                          join products_versions pv on pvr.product_version_id = pv.product_version_id                          join products p on pv.product_id = p.products_id                        where pvr.product_version_release_id = :productVersionReleaseId';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('productVersionReleaseId', $this->productVersionReleaseId);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject();    }    /** Conta a quantidades de registros */    public function Count()    {        /** Consulta SQL */        $this->sql = 'select count(product_version_release_file_id) as qtde					  from products_versions_releases_files ';        /** Preparo o SQL para execução */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Executo o SQL */        $this->stmt->execute();        /** Retorno o resultado */        return $this->stmt->fetchObject()->qtde;    }    /** Insere um novo registro no banco */    public function Save(int $productVersionReleaseFileId, string $productVersionReleaseId, string $name, string $path, string $history)    {        /** Parametros */        $this->productVersionReleaseFileId = $productVersionReleaseFileId;        $this->productVersionReleaseId = $productVersionReleaseId;        $this->name = $name;        $this->path = $path;        $this->history = $history;        /** Verifica se o ID do registro foi informado */        if ($this->productVersionReleaseFileId > 0) {            /** Consulta SQL */            $this->sql = 'update products_versions_releases_files set product_version_release_id = :product_version_release_id,									   	     name = :name,									   	     path = :path,									   	     history = :history					  	  where product_version_release_file_id = :product_version_release_file_id';        } else {//Se o ID não foi informado, grava-se um novo registro            /** Consulta SQL */            $this->sql = 'insert into products_versions_releases_files(product_version_release_file_id, 											  product_version_release_id, 											  name, 											  path, 											  history 								 	 ) values (:product_version_release_file_id, 									  		   :product_version_release_id,									  		   :name,									  		   :path,									  		   :history)';        }        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('product_version_release_file_id', $this->productVersionReleaseFileId);        $this->stmt->bindParam('product_version_release_id', $this->productVersionReleaseId);        $this->stmt->bindParam('name', $this->name);        $this->stmt->bindParam('path', $this->path);        $this->stmt->bindParam('history', $this->history);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Deleta um determinado registro no banco de dados */    function Delete(int $productVersionReleaseFileId)    {        /** Parametros de entrada */        $this->productVersionReleaseFileId = $productVersionReleaseFileId;        /** Consulta SQL */        $this->sql = 'delete from products_versions_releases_files					  where  product_version_release_file_id = :product_version_release_file_id';        /** Preparo o sql para receber os valores */        $this->stmt = $this->connection->connect()->prepare($this->sql);        /** Preencho os parâmetros do SQL */        $this->stmt->bindParam('product_version_release_file_id', $this->productVersionReleaseFileId);        /** Executo o SQL */        return $this->stmt->execute();    }    /** Fecha uma conexão aberta anteriormente com o banco de dados */    function __destruct()    {        $this->connection = null;    }}